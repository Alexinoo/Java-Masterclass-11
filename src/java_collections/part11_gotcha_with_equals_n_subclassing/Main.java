package java_collections.part11_gotcha_with_equals_n_subclassing;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/*
* Potential Issues with equals() and hashcode()
*
* When overriding the equals() method in the HeavenlyBody class, we were careful to make sure that it would not return true if a HeavenlyBody was
*  compared to a subclass of itself.
*
* We did that to demonstrate that method, but it was actually unnecessary in the HeavenlyBody class.
*
* The mini challenge is just a question: why was it unnecessary?
*
*
* Answer:
*
* The HeavenlyBody class is declared final, so cannot be subclassed.
*   - So of course, we didn't need to do any tests to check the subclass as we already know that it was marked final
*
* The Java String class is also final
*   - Which is why it can safely use the instanceof method without having to worry about comparisons with a subclass.
*
*
* But why is it an issue of using an instance of subclasses ?
*   - Let's create some additional code to illustrate this and outline what the problem is
*
* Create a Dog class
*
* Create Labrador class that extends the Dog class
*
* Next
*   - Create a Labrador pet instance called Rover
*   - Create a Dog instance called Rover too
*
* ////////
* We're very distressed at this point at the loss of our pet
* So we're going to find the dog to see if she's been found
*
* Now, they have a dog and the dog is called "rover" but is she our pet, well that depends on how you ask the question
* So what we can do here to answer that question in programming terms is to check
*
*   - does rover2.equals(rover)
*
*       System.out.println(rover2.equals(rover)); // true
*
*   - does rover.equals(rover2)
*
*       System.out.println(rover.equals(rover2)); // false
*
*   - Basically what's happening here is a Labrador is an instanceof Dog , but a Dog is not an instance of Labrador and the 2nd test returns false
*
*   - This violates the symmetric rule , that an equals() must obey
*       - Has to be equal on both sides of the coin
*           i.e
*               rover2.equals(rover) needs to be true
*
*       - and
*               rover.equals(rover2) needs to be true as well
*
*   - We can't fix this because this is obviously a problem at the moment
*
* /////////
*   - The best way to fix this is not to override the equals() in Labrador
*       - comment the equals() from the Labrador class
*
* ////////
*   - Now that we have done that, we should be able to find our pet regardless of how the question is phrased
*       - And we get true in both cases
*
*   - Because we're not overriding that equals() , it's now set to true in both cases whichever way the question is phrased in other words
*
*   - To ensure that equals can't be overridden in subclasses of Dog , we need to mark it as final and this means that this method cannot be overwritten
*     at that point
*       - This means we'll get an error if we try to uncomment the equals() code from the Labrador class
*
* Summary /////////////////
*
* - This means a great deal of thought is needed when you're overriding equals() and of course hashCode()
*
* So should you allow your classes to be sub-classed ?
*   - If so, how do you treat comparisons between a subclass and its base class
*   - So if the subclass would reasonably only add methods that do not alter the way that equality should work, then allow subclassing but mark
*     your equals() and hashCode() as final
*   - If a subclass is likely to be different object, then use the method we use in HeavenlyBody to make comparisons between the subclass and it's
*     base class returns false
*       - If neither of this would really fit, then prevent subclassing and force clients to use composition instead
*
* The HeavenlyBody class isn't immutable, because we can add moons to it but any change we make to it won't affect the behavior of equals() or the
*   hashCode() that is generated by its hashCode()
*
*
*/
public class Main {
    public static void main(String[] args) {
        Labrador rover  = new Labrador("Rover");
        Dog rover2 = new Dog("Rover");

        System.out.println("Is rover(Labrador) an instanceof Dog : "+rover2.equals(rover));

        System.out.println("Is rover2(Dog) and instanceof Labrador : "+rover.equals(rover2));
    }
}
